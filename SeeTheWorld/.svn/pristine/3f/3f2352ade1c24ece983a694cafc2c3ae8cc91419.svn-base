package cn.caregg.o2o.carnest.engine.task;

import java.util.List;
import java.util.Map;

import cn.caregg.o2o.carnest.config.ConstantValues;
import cn.caregg.o2o.carnest.config.EventTagConfig;
import cn.caregg.o2o.carnest.config.GlobalParams;
import cn.caregg.o2o.carnest.engine.callback.BaseAbstractRequestCallBack;
import cn.caregg.o2o.carnest.engine.handler.BaseRequestHandler;
import cn.caregg.o2o.carnest.engine.parser.GsonParser;
import cn.caregg.o2o.carnest.entity.CarDetail;
import cn.caregg.o2o.carnest.entity.EventByTag;
import cn.caregg.o2o.carnest.entity.Service;
import cn.caregg.o2o.carnest.entity.ServiceViolation;
import cn.caregg.o2o.carnest.utils.ListUtils;
import cn.caregg.o2o.carnest.utils.ParamsMappingUtils;

import com.google.gson.reflect.TypeToken;
import com.lidroid.xutils.http.client.HttpRequest.HttpMethod;

import de.greenrobot.event.EventBus;

public class ViolationTask {

	/** 
	 * @Description: 获得车牌号列表 void 返回类型  
	 * @throws:throws
	*/

	public void getCarIdList() {
		new BaseRequestHandler().send(ConstantValues.CAR_NUMBER_LIST.toString() + GlobalParams.carOwnerSeq,
				HttpMethod.GET, new BaseAbstractRequestCallBack<String>() {

					@Override
					public void onSuccess(String result) {
						parseCarDetailList(result);
					}

					private void parseCarDetailList(String result) {
						List<CarDetail> datalist = GsonParser.parseList(result, new TypeToken<List<CarDetail>>() {
						});
						if (!ListUtils.isEmpty(datalist)) {
							EventBus.getDefault().post(EventByTag.getDefault(datalist, EventTagConfig.TAG_CARID_LIST));
						}
					}

					@Override
					public void onFailure(String failureMsg) {

					}
				});
	}

	/** 
	 * @Description: 获取车主车辆信息 void 返回类型  
	 * @throws:throws
	*/

	public void getCarDetail() {
		new BaseRequestHandler().send(
				ConstantValues.CAR_DETAIL_MESSAGE.toString() + 1 + "/" + GlobalParams.carOwnerSeq, HttpMethod.GET,
				new BaseAbstractRequestCallBack<String>() {

					@Override
					public void onSuccess(String result) {
						CarDetail carDetail = GsonParser.parseObject(result, CarDetail.class);
						if (null != carDetail) {
							EventBus.getDefault().post(EventByTag.getDefault(carDetail, EventTagConfig.TAG_CAR_DETAIL));
						}
					}

					@Override
					public void onFailure(String failureMsg) {

					}
				});
	}

	/** 
	 * @Description: 获取待处理违章列表
	 * @param map void 返回类型  
	 * @throws:throws
	*/

	public void getPendingViolationList(CarDetail carDetail) {
		Map<String, Object> map = ParamsMappingUtils.getViolationList(10, GlobalParams.carOwnerSeq,
				carDetail.getCarId(), carDetail.getCarEngine(), carDetail.getCarVin());
		new BaseRequestHandler().send(ConstantValues.VIOLATION_LIST_UNCANDEAL.toString(), HttpMethod.POST, map,
				new BaseAbstractRequestCallBack<String>() {

					@Override
					public void onSuccess(String result) {
						List<ServiceViolation> datalist = GsonParser.parseObject(result, Service.class).getListMap();
						if (null != datalist) {
							EventBus.getDefault().post(
									EventByTag.getDefault(datalist, EventTagConfig.TAG_PENDING_VIOLATION_LIST));
						}
					}

					@Override
					public void onFailure(String failureMsg) {

					}
				});
	}

	/** 
	 * @Description: 获取处理中违章列表
	 * @param map void 返回类型  
	 * @throws:throws
	*/

	public void getprocessingViolationList(CarDetail carDetail, final String TAG) {
		Map<String, Object> map = ParamsMappingUtils.getViolationList(20, GlobalParams.carOwnerSeq,
				carDetail.getCarId(), carDetail.getCarEngine(), carDetail.getCarVin());
		new BaseRequestHandler().send(ConstantValues.VIOLATION_LIST_CANDEAL.toString(), HttpMethod.POST, map,
				new BaseAbstractRequestCallBack<String>() {

					@Override
					public void onSuccess(String result) {
						List<ServiceViolation> datalist = GsonParser.parseList(result,
								new TypeToken<List<ServiceViolation>>() {
								});
						if (null != datalist) {
							EventBus.getDefault().post(
									EventByTag.getDefault(datalist, EventTagConfig.TAG_PROCESSING_VIOLATION_LIST));
						}
					}

					@Override
					public void onFailure(String failureMsg) {

					}
				});
	}
}
